# -*- coding: utf-8 -*-
"""B22CS044_myLDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jUtylBUkcLe3cxrpo1-pXVhZExQwgysz
"""

#This is a helper code for problem-1 (Task-1) of PA-4
#Complete this code by writing the function definations
#Compute following terms and print them:\\
#1. Difference of class wise means = ${m_1-m_2}$\\
#2. Total Within-class Scatter Matrix $S_W$\\
#3. Between-class Scatter Matrix $S_B$\\
#4. The EigenVectors of matrix $S_W^{-1}S_B$ corresponding to highest EigenValue\\
#5. For any input 2-D point, print its projection according to LDA.

import csv
import numpy as np

def ComputeMeanDiff(X):

  target_col = X[:, 2]
  cond = target_col > 0
  arr1 = X[cond]
  arr0 = X[~cond]

  m1 = np.mean(arr0[:, :-1], axis=0)
  m2 = np.mean(arr1[:, :-1], axis=0)

  m = abs(m1 - m2)

  return m

def ComputeSW(X):
  class_labels = np.unique(X[:, -1])
  SW = np.zeros((X.shape[1] - 1, X.shape[1] - 1))

  for c in class_labels:
      X_c = X[X[:, -1] == c][:, :-1]
      mean_c = np.mean(X_c, axis=0)
      SW += np.dot((X_c - mean_c).T, (X_c - mean_c))
  return SW

def ComputeSB(X):

  overall_mean = np.mean(X[:, :-1], axis=0)
  class_labels = np.unique(X[:, -1])
  SB = np.zeros((X.shape[1] - 1, X.shape[1] - 1))

  for c in class_labels:
      X_c = X[X[:, -1] == c][:, :-1]
      mean_c = np.mean(X_c, axis=0)
      n_c = X_c.shape[0]
      mean_diff = mean_c - overall_mean
      SB += n_c * np.outer(mean_diff, mean_diff)
  return SB

def GetLDAProjectionVector(X):

  SW = ComputeSW(X)
  SB = ComputeSB(X)
  A = np.linalg.inv(SW).dot(SB)
  eigenvalues, eigenvectors = np.linalg.eig(A)
  idx = np.argmax(np.abs(eigenvalues))
  w = eigenvectors[:, idx].real
  return w

def project(x,y,w):
   point = np.array([x, y])
   return np.dot(point, w)

#########################################################
###################Helper Code###########################
#########################################################

X = np.empty((0, 3))
with open('data.csv', mode ='r')as file:
  csvFile = csv.reader(file)
  for sample in csvFile:
        X = np.vstack((X, np.array(sample, dtype = float)))

print(X)
print(X.shape)
# X Contains m samples each of formate (x,y) and class label 0.0 or 1.0

opt=int(input("Input your option (1-5): "))

match opt:
  case 1:
    meanDiff=ComputeMeanDiff(X)
    print(meanDiff)
  case 2:
    SW=ComputeSW(X)
    print(SW)
  case 3:
    SB=ComputeSB(X)
    print(SB)
  case 4:
    w=GetLDAProjectionVector(X)
    print(w)
  case 5:
    x=int(input("Input x dimension of a 2-dimensional point :"))
    y=int(input("Input y dimension of a 2-dimensional point :"))
    w=GetLDAProjectionVector(X)
    print(project(x,y,w))